<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic" >


	<SolidColorBrush x:Key="BackroundNormalBrush" Color="Black"/>
	<SolidColorBrush x:Key="ForegroundNormalBrush" Color="YellowGreen"/>
	<SolidColorBrush x:Key="BorderNormalBrush" Color="#FF688CAF"/>

	<SolidColorBrush x:Key="HighlightBackroundBrush" Color="#FF688CAF"/>
	<SolidColorBrush x:Key="HighlightBorderBrush" Color="#297FD2"/>

	<Color x:Key="{x:Static SystemColors.WindowTextColorKey}" >#FF9ACD32</Color>
	<SolidColorBrush x:Key="{x:Static SystemColors.WindowTextBrushKey}" Color="#FF9ACD32"/> 

	<SolidColorBrush x:Key="ListingBackgroundBrush" Color="#FF363636"/>

	<SolidColorBrush x:Key="{x:Static SystemColors.AppWorkspaceBrushKey}" Color="#FF363636"/>

	<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FF484F19"/>
	<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="#FFBBBBBB"/>

	<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#FF484F19"/>
	<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="#FFBBBBBB"/>


	<SolidColorBrush x:Key="IconForeground1Brush" Color="YellowGreen"/>

	<Style TargetType="{x:Type DataGrid}" >
		<Setter Property="Foreground" Value="{StaticResource ForegroundNormalBrush}"/>
	</Style>

	<Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ResourceKey={x:Type ListBox}}">
		<Setter Property="Background" Value="{x:Null}"   />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush"  Value="#FF688CAF"/>
		<Setter Property="SnapsToDevicePixels"  Value="True"/>
	</Style>

	<Style x:Key="ArmaButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border
							x:Name="PART_border"
							Background="Transparent"
                            />
						<ContentPresenter />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_border" Property="Background" Value="#FFF" />
							<Setter TargetName="PART_border" Property="Opacity" Value="0.7" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="PART_border" Property="Background" Value="{StaticResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
							<Setter TargetName="PART_border" Property="Opacity" Value="1" />
							<Setter Property="Foreground" Value="#FFF"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


     
	<Style x:Key="EllipseButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						 
						<Ellipse x:Name="Ellipse" Fill="{TemplateBinding BorderBrush}" Stroke="{TemplateBinding Foreground}"/>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							RecognizesAccessKey="True" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="ç"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Ellipse" Property="Stroke" Value="{StaticResource HighlightBorderBrush}"/>
							<Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource HighlightBackroundBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True"/>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


    <Style x:Key="EmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeDashArray="1 2" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" Margin="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


    <Style x:Key="OnOffCheckBoxStyle" TargetType="{x:Type CheckBox}"  BasedOn="{StaticResource ResourceKey={x:Type CheckBox}}">
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>-->
        <Setter Property="Foreground" Value="{DynamicResource ToolbarForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{x:Static themes:ClassicBorderDecorator.ClassicBorderBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="CheckMark" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"  >
                                <Border.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Border.LayoutTransform>
                                <Grid  FlowDirection="LeftToRight">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*"/>
                                        <ColumnDefinition Width="1*"/>
                                        
                                    </Grid.ColumnDefinitions>
                                    <!-- {DynamicResource {x:Static SystemColors.WindowTextBrushKey}} -->
                                    
                                    <Grid x:Name="GridOff" Grid.Column="1" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Rectangle Grid.Column="0" Stroke="#757575" StrokeThickness="1" StrokeDashCap="Round" Fill="#757575"  Width="10" StrokeDashArray="1 0"/>
                                        <TextBlock x:Name="TextOff" Grid.Column="1" Padding="1" Foreground="{TemplateBinding Foreground}" Text="OFF" RenderTransformOrigin="0.5,0.5" />
                                    </Grid>
                                    
                                    <Grid x:Name="GridOn" Grid.Column="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="10*"/>
                                            <ColumnDefinition Width="4*" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock x:Name="TextOn" Grid.Column="0"  Padding="1" Foreground="{TemplateBinding Foreground}" Text="ON" FontWeight="Black" RenderTransformOrigin="0.5,0.5" />
                                        <Rectangle Grid.Column="1" Stroke="#6D5CEE" StrokeThickness="1"  StrokeDashCap="Round" Width="10" Fill="#7462FF" StrokeDashArray="1 0" />
                                    </Grid>

                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.CustomVisualStateManager>
                            <ei:ExtendedVisualStateManager/>
                        </VisualStateManager.CustomVisualStateManager>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates"/>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GridOff" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="GridOn" Value="Visible"/>

                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="GridOff" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="GridOn" Value="Hidden"/>
                            <Setter Property="Background" TargetName="CheckMark" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Background" TargetName="CheckMark" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter Property="Foreground" TargetName="TextOff" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter Property="Foreground" TargetName="TextOn" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="CheckMark" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="CheckMark" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" TargetName="TextOff" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Foreground" TargetName="TextOn" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>